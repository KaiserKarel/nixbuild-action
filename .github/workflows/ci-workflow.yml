name: nixbuild-ci

on:
  workflow_call:
    secrets:
      nixbuild_ssh_key:
        required: true
        description: |
          The private ssh key used to authenticate with nixbuild.net

          You should not add your private key directly to the workflow file but
          instead define a GitHub Secret for it, to avoid mistakenly sharing your
          key with others.

          It is advisable to create a new nixbuild.net ssh key specifically for
          use within GitHub (or even per repository or workflow). That way you can
          revoke access to your nixbuild.net account in a fine-grained fashion.

    outputs:
      results:
        value: ${{ jobs.collect-results.outputs.results }}

    inputs:
      filter_builds:
        type: string
        required: false
        default: '.top_attr == "checks"'

      label_builds:
        type: string
        required: false
        default: '"\(.attr) [\(.system)]"'

      flake_directory:
        type: string
        required: false
        default: '.'

      pre_evaluation_script:
        type: string
        required: false
        default: ''

      pre_build_script:
        type: string
        required: false
        default: ''


jobs:

  eval-flake:
    name: "evaluate flake"
    runs-on: ubuntu-latest
    outputs:
      builds: ${{ steps.find-builds.outputs.builds }}
    steps:
      - uses: actions/checkout@v3
      - uses: nixbuild/nix-quick-install-action@v12
        with:
          nix_on_tmpfs: true
          nix_conf: experimental-features = nix-command flakes
      - name: Pre-evaluation script
        run: ${{inputs.pre_evaluation_script}}
      - name: Find builds
        id: find-builds
        run: |
          set -eo pipefail
          flake_json="$(mktemp)"
          builds="$(mktemp)"
          nix flake show "./${{inputs.flake_directory}}" --json > "$flake_json"
          jq < "$flake_json" -rc '{checks: (.checks // {}), packages: (.packages // {})}|to_entries|map(.key as $top_attr | .value|to_entries|map(.key as $sys | .value|to_entries|map(.key as $attr | {name: "", description: "", top_attr: $top_attr, system: $sys, attr: $attr} + .value)))|flatten|map(select(${{inputs.filter_builds}}))|map(. as $x | (${{inputs.label_builds}}) as $l | $x + {label: $l})|"::set-output name=builds::\(.)"'

  build:
    name: ${{matrix.build.label}}
    needs: eval-flake
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build: ${{fromJSON(needs.eval-flake.outputs.builds)}}
    steps:
      - uses: actions/checkout@v3
      - uses: nixbuild/nix-quick-install-action@v12
        with:
          nix_on_tmpfs: true
          nix_conf: experimental-features = nix-command flakes
      - uses: nixbuild/nixbuild-action@v9
        with:
          nixbuild_ssh_key: ${{secrets.nixbuild_ssh_key}}

      - name: Pre-build script
        run: ${{inputs.pre_build_script}}

      - name: "Build ${{matrix.build.top_attr}}.${{matrix.build.system}}.${{matrix.build.attr}}"
        id: build
        run: |
          touch build.json
          nix build "./${{inputs.flake_directory}}#${{matrix.build.top_attr}}.${{matrix.build.system}}.${{matrix.build.attr}}" \
            --print-build-logs \
            --eval-store auto \
            --store ssh-ng://eu.nixbuild.net \
            --json > build.json || true

          if [ -s build.json ]; then
            echo '[{"success":false}]' > build.json
            echo '::set-output name=success::false'
          else
            echo '::set-output name=success::true'
          fi

          jq -c '{success: true, name: "${{matrix.build.name}}", description: "${{matrix.build.description}}", label: "${{matrix.build.label}}"} + .[0] | {"${{matrix.build.top_attr}}": {"${{matrix.build.system}}": {"${{matrix.build.attr}}": .}}}' build.json > result.json

      - name: Upload result
        uses: actions/upload-artifact@v3
        with:
          name: "${{matrix.build.top_attr}}.${{matrix.build.system}}.${{matrix.build.attr}}"
          path: result.json

      - name: Check for failure
        if: ${{ steps.build.outputs.success == "false" }}
        run: |
          echo >&2 "Build failed"
          exit 1


  collect-results:
    name: "collect results"
    needs: build
    runs-on: ubuntu-latest
    outputs:
      results: ${{ steps.merge.outputs.results }}
    steps:
      - id: download
        uses: actions/download-artifact@v3
        with:
          path: ~/results
      - id: merge
        run: |
          jq -rcs 'reduce .[] as $x ({}; . * $x)|"::set-output name=results::\(.)"' \
            "${{steps.download.outputs.download-path}}"/*/result.json
